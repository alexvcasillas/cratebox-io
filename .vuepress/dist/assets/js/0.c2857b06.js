(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{51:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("p",[a("img",{attrs:{src:"https://github.com/alexvcasillas/cratebox/blob/master/logo/cratebox-logo.jpg?raw=true",alt:"Cratebox Logo"}})]),a("p",[a("a",{attrs:{href:"https://circleci.com/gh/alexvcasillas/cratebox",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://circleci.com/gh/alexvcasillas/cratebox.svg?style=svg",alt:"CircleCI"}})]),a("a",{attrs:{href:"http://makeapullrequest.com",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square",alt:"PRs Welcome"}})]),a("a",{attrs:{href:"http://www.firsttimersonly.com/",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://img.shields.io/badge/first--timers--only-friendly-blue.svg?style=flat-square",alt:"first-timers-only"}})])]),a("p",[a("strong",[t._v("Cratebox")]),t._v(" is an Opinionated State Management library for no particular UI library.")]),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation","aria-hidden":"true"}},[t._v("#")]),t._v(" Motivation")]),a("p",[t._v("I started working on "),a("strong",[t._v("Cratebox")]),t._v(" to prove myself I was able to build a powerful state management library following the example of top notch developers like "),a("em",[t._v("Michel Weststrate")]),t._v(", "),a("em",[t._v("Dan Abramov")]),t._v(", "),a("em",[t._v("Jamie")]),t._v(" and many more. I wanted something robust and typed like "),a("em",[t._v("MobX State Tree")]),t._v(" but also wanted something clear and easy to use, and that's why I built "),a("strong",[t._v("Cratebox")]),t._v(", to be an intermediate point between "),a("em",[t._v("MobX State Tree")]),t._v(" and "),a("em",[t._v("Redux")]),t._v(", robust and with a declarative and simple API that does the job always.")]),a("h2",{attrs:{id:"why-cratebox"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-cratebox","aria-hidden":"true"}},[t._v("#")]),t._v(" Why Cratebox?")]),a("p",[t._v("This is a question that often comes to my mind. Why you should use "),a("strong",[t._v("Cratebox")]),t._v("?. The answer could be: because you might like it. Or because you find an opinionated library interesting so you don't have to overwhelm yourself with decisions. Maybe it's because you like this simple API that it has. Using "),a("strong",[t._v("Cratebox")]),t._v(" is up to you. I've been working with "),a("em",[t._v("Redux")]),t._v(" and "),a("em",[t._v("MobX State Tree")]),t._v(" for a very long time and I believe "),a("strong",[t._v("Cratebox")]),t._v(" is right in between of this to impressive libraries and will get things done if you give it a try, for sure!")]),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[t._v("#")]),t._v(" Installation")]),a("p",[t._v("NPM")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install cratebox\n")])]),a("p",[t._v("Yarn")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yarn add cratebox\n")])]),a("h2",{attrs:{id:"getting-started"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started","aria-hidden":"true"}},[t._v("#")]),t._v(" Getting Started")]),a("p",[t._v("To get started with "),a("strong",[t._v("Cratebox")]),t._v(" first of all you need to import the dependency into your project plus the typings dependency for your models.")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { cratebox, types } from 'cratebox`\n// Instantiate CrateBox\nconst myCratebox = cratebox();\n")])]),a("p",[t._v("From that point on, you'll have access to the full API of "),a("strong",[t._v("Cratebox")]),t._v(".")]),a("h2",{attrs:{id:"describing-a-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#describing-a-store","aria-hidden":"true"}},[t._v("#")]),t._v(" Describing a Store")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.describeStore({\n  identifier: 'user',\n  model: {\n    name: types.string,\n    lastName: types.string,\n    avatar: types.string,\n    age: types.number,\n    birthDate: types.date,\n    position: types.string,\n    github: types.string,\n  }\n});\n")])]),a("p",[t._v("Let's take a look at the example above and let's get though all of the details.")]),a("p",[t._v("First of all we have the "),a("code",[t._v("describeStore")]),t._v(" function. This function is the one in charge to tell "),a("strong",[t._v("Cratebox")]),t._v(" that we would like to describe a new store were we will put our state.")]),a("p",[t._v("The "),a("code",[t._v("describeStore")]),t._v(" function takes on parameter that is an object will the following structure:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  identifier: string,\n  model: model object\n}\n")])]),a("p",[t._v("The "),a("code",[t._v("identifier")]),t._v(" property represents the name of the store you're describing, therefore, this will be the name you'll be using latter on to deal with this particular store within "),a("strong",[t._v("Cratebox")]),t._v(".")]),a("p",[t._v("The "),a("code",[t._v("model")]),t._v(" property is a "),a("code",[t._v("model object")]),t._v(" that represents all of the properties that you're identified store will contain. This properties could be any of the properties that we will describe later on. This properties are typed by our own typing system and will let you build rock-solid-typed models.")]),a("p",[t._v("As we can see at the "),a("code",[t._v("describeStore")]),t._v(" example above, we're defining a model that contains the following properties:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("name: types.string,\nlastName: types.string,\navatar: types.string,\nage: types.number,\nbirthDate: types.date,\nposition: types.string,\ngithub: types.string,\n")])]),a("p",[t._v("Many of the properties described above are of type "),a("code",[t._v("string")]),t._v(", meaning that no mater what you store there, if it's not a "),a("code",[t._v("string")]),t._v(", it will complain about it and, therefore, it wont let you store it at the given property.")]),a("p",[t._v("There's also a type "),a("code",[t._v("number")]),t._v(" and a type "),a("code",[t._v("date")]),t._v(" there, meaning that, the property "),a("code",[t._v("age")]),t._v(" will only be able to store numeric data and the "),a("code",[t._v("birthDate")]),t._v(" property will only be able to store instances of the "),a("code",[t._v("Date")]),t._v(" type.")]),a("p",[t._v("Ok, we've described our store so far at this point. Let's proceed with more stuff about "),a("strong",[t._v("Cratebox")]),t._v(".")]),a("h2",{attrs:{id:"dispatching-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatching-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Dispatching changes")]),a("p",[t._v("To dispatch a change into a store, we will call the "),a("code",[t._v("dispatch")]),t._v(" function from the "),a("strong",[t._v("Cratebox")]),t._v(" API.")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.dispatch({\n  identifier: 'user',\n  model: {\n    name: 'Alex',\n    lastName: 'Casillas',\n    age: 28,\n    birthDate: new Date('1990-03-23'),\n    avatar: 'https://avatars3.githubusercontent.com/u/9496960?s=460&v=4',\n    position: 'Frontend Engineer',\n    github: 'https://github.com/alexvcasillas'\n  }\n})\n")])]),a("p",[t._v("Let's take a minute to process the code above. Got it? Ok, let's go for it.")]),a("p",[t._v("The "),a("code",[t._v("dispatch")]),t._v(" function takes on single argument that is a "),a("code",[t._v("dispatch object")]),t._v(". This "),a("code",[t._v("dispatch object")]),t._v(" contains the following properties:")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  identifier"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" model object\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("See some resemblance from something we described before? That's it! It has the same structure that our "),a("code",[t._v("described store")]),t._v("! That makes things even more easy to deal with.")]),a("p",[t._v("The "),a("code",[t._v("identifier")]),t._v(" property will tell "),a("strong",[t._v("Cratebox")]),t._v(" which of the "),a("code",[t._v("described stores")]),t._v(" is the one that's getting a change. In the example above, "),a("code",[t._v("user")]),t._v(" store is the one that's getting a change dispatched.")]),a("p",[t._v("We can dispatch as many changes to a store as we want. You have to consider that you dispatch changes to a model, meaning that, calling the "),a("code",[t._v("dispatch")]),t._v(" event with the following data:")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("myCratebox"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  identifier"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'user'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Antonio'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    lastName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Cobos'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    position"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Backend Engineer'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("Won't generate a new state with just:")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Antonio'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  lastName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Cobos'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  position"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Backend Engineer'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("But instead will be:")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Antonio'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  lastName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Cobos'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  avatar"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'https://avatars3.githubusercontent.com/u/9496960?s=460&v=4'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("28")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  birthDate"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1990-03-23'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  position"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Backend Engineer Engineer'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  github"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'https://github.com/alexvcasillas'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("As you can see, it will generate changes based on the previous state, making sure that state changes to a single value won't break the state of your app.")]),a("p",[t._v("You also have to take note that properties that "),a("em",[t._v("are not described")]),t._v(" at the "),a("code",[t._v("describeStore()")]),t._v(" function, won't affect your state if you try to dispatch properties not defined previously. For example:")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("myCratebox"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  identifier"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'user'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Antonio'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    lastName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Cobos'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    position"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Backend Engineer'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    mightyLevel"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Over 9000!!'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("This "),a("code",[t._v("dispatch")]),t._v(" call will generate a new state with the described properties updated but the "),a("code",[t._v("mightyLevel")]),t._v(" property will be discarded.")]),a("h2",{attrs:{id:"retrieving-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retrieving-state","aria-hidden":"true"}},[t._v("#")]),t._v(" Retrieving State")]),a("p",[t._v("You can retrieve the current state of a specific store making use of our simple exposed API method for this: "),a("code",[t._v("getState(identifier: string)")])]),a("p",[t._v("This method will retrieve the current state of a store by the given identifier. Let's look at an example:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Describe the store\nmyCratebox.describeStore({\n  identifier: 'user',\n  model: {\n    name: types.string,\n    lastName: types.string,\n  }\n});\n\n// Dispatch a new change at the user store\nmyCratebox.dispatch({\n  identifier: 'user',\n  model: {\n    name: 'Alex',\n    lastName: 'Casillas',\n  }\n})\n\n// Call the Get State method\nconsole.log( myCratebox.getState('user') );\n")])]),a("p",[t._v("The code above will give you the following output in your console:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  name: 'Alex',\n  lastName: 'Casillas',\n}\n")])]),a("h2",{attrs:{id:"subscriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscriptions","aria-hidden":"true"}},[t._v("#")]),t._v(" Subscriptions")]),a("p",[t._v("Subscriptions will let you listen to changes to a given store. This way you'll be able to update your UI (for example) based on state changes you made to your store.")]),a("p",[t._v("The way of subscribing to changes within a particular store is:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.subscribe('user', model => {\n  // Handle your changes the way you want here :)\n});\n")])]),a("p",[t._v("Let's dive into the "),a("code",[t._v("subscribe")]),t._v(" method now.")]),a("p",[t._v("This method takes two arguments, the "),a("code",[t._v("identifier")]),t._v(" of the store you want to track state changes to and a callback function that will give you the current "),a("code",[t._v("state model")]),t._v(" after a "),a("code",[t._v("dispatch")]),t._v(" action make changes to a store.")]),a("p",[t._v("Let's see the following case as example:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Describe the store\nmyCratebox.describeStore({\n  identifier: 'user',\n  model: {\n    name: types.string,\n    lastName: types.string,\n  }\n});\n\n// Create a subscriber for the user store\nmyCratebox.subscribe('user', model => {\n  console.log(model);\n})\n\n// Dispatch a new change at the user store\nmyCratebox.dispatch({\n  identifier: 'user',\n  model: {\n    name: 'Antonio',\n    lastName: 'Cobos',\n  }\n})\n")])]),a("p",[t._v("At the right moment you "),a("code",[t._v("dispatch")]),t._v(" the changes to the "),a("code",[t._v("user store")]),t._v(". The subscription hook will be called and you'll get the following output logged at the console:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  name: 'Antonio',\n  lastName: 'Cobos',\n}\n")])]),a("p",[t._v("As you can see, subscriptions are pretty simple to use and you don't need to be subscribing to all of your stores' changes, you can subscribe to specific a store changes right whenever you need them.")]),a("h2",{attrs:{id:"time-traveling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-traveling","aria-hidden":"true"}},[t._v("#")]),t._v(" Time Traveling")]),a("p",[t._v("Time traveling is supported out of the box for you. We expose a simple API that will let you handle time traveling in a simple way.")]),a("p",[t._v("Let's say you want to travel backgrounds in your store, then you simply:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.travelBackwards('user');\n")])]),a("p",[t._v("Or let's say you want to travel forwards after you just traveled backwards, simply:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.travelForwards('user');\n")])]),a("p",[t._v("Let's dive a little into the Time Traveling API. It's simple, we expose to methods: "),a("code",[t._v("travelBackwards")]),t._v(" and "),a("code",[t._v("travelForwards")]),t._v(".")]),a("p",[t._v("Both of the methods require one single argument: the store "),a("code",[t._v("identifier")]),t._v(" of the store you want to make time travel with.")]),a("p",[t._v("Let's take a look at this with a little example:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Describe the store\nmyCratebox.describeStore({\n  identifier: 'user',\n  model: {\n    name: types.string,\n    lastName: types.string,\n  }\n});\n\n// Create a subscriber for the user store\nmyCratebox.subscribe('user', model => {\n  console.log('Store Changes: ', model);\n})\n\n// Dispatch a new change at the user store\nmyCratebox.dispatch({\n  identifier: 'user',\n  model: {\n    name: 'Alex',\n    lastName: 'Casillas',\n  }\n})\n\n// Dispatch another change at the user store\nmyCratebox.dispatch({\n  identifier: 'user',\n  model: {\n    name: 'Antonio',\n    lastName: 'Cobos',\n  }\n})\n\n// Call the Travel Backwards method\nmyCratebox.travelBackwards('user');\n// Call the Travel Forwards method\nmyCratebox.travelForwards('user');\n")])]),a("p",[t._v("When executing the example above you'll have the following output:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// First Dispatch\nStore Changes: { name: 'Alex', lastName: 'Casillas' }\n// Second Dispatch\nStore Changes: { name: 'Antonio', lastName: 'Cobos' }\n// Travel Backwards\nStore Changes: { name: 'Alex', lastName: 'Casillas' }\n// Travel Forwards\nStore Changes: { name: 'Antonio', lastName: 'Cobos' }\n")])]),a("p",[t._v("If you have noticed, the same "),a("code",[t._v("subscription")]),t._v(" you've created for listening to changes when "),a("code",[t._v("dispatch")]),t._v(" is called, will also work for Time Traveling out of the box.")]),a("h2",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types","aria-hidden":"true"}},[t._v("#")]),t._v(" Types")]),a("p",[a("strong",[t._v("Cratebox")]),t._v(" is a typed state management library and therefore, comes bundled with basic types plus some advanced types.")]),a("p",[t._v("All of the types are to be imported from the "),a("code",[t._v("types")]),t._v(" namespace.")]),a("h2",{attrs:{id:"basic-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic Types")]),a("p",[t._v("The basic types of "),a("strong",[t._v("Cratebox")]),t._v(" are the following and self explanatory")]),a("ul",[a("li",[t._v("types.string")]),a("li",[t._v("types.number")]),a("li",[t._v("types.boolean")]),a("li",[t._v("types.null")]),a("li",[t._v("types.undefined")]),a("li",[t._v("types.date")])]),a("h2",{attrs:{id:"advanced-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Advanced Types")]),a("p",[t._v("The advanced types of "),a("strong",[t._v("Cratebox")]),t._v(" are currently a work in progress but will contain some of the following types for your use:")]),a("h3",{attrs:{id:"types-array-type-base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-array-type-base","aria-hidden":"true"}},[t._v("#")]),t._v(" types.array(type: base)")]),a("p",[t._v("The array type recieves a basic type as a single parameter and will make sure that all of the values stored at the array are solely that type.")]),a("p",[t._v("For example:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.describeStore({\n  identifier: 'user',\n  model: {\n    name: types.string,\n    lastName: types.string,\n    notes: types.array(types.string)\n  }\n});\n")])]),a("p",[t._v("If you try to include any type different from the base string type it will complain and throw an error.")]),a("h3",{attrs:{id:"types-enum-enumeration-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-enum-enumeration-string","aria-hidden":"true"}},[t._v("#")]),t._v(" types.enum(enumeration: string[])")]),a("p",[t._v("The enumeration type recieves an array of literal strings as a single parameter and will make sure that the value that is trying to be store is one of the described in the enumeration.")]),a("p",[t._v("For example")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.describeStore({\n  identifier: 'notes',\n  model: {\n    title: types.string,\n    description: types.string\n    status: types.enum(['DRAFT', 'PUBLISHED', 'HIDDEN'])\n  }\n});\n")])]),a("p",[t._v("If you try to include anything that is not one of the described string literals it will complain and throw an error.")]),a("h3",{attrs:{id:"types-literal-literal-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-literal-literal-string","aria-hidden":"true"}},[t._v("#")]),t._v(" types.literal(literal: string)")]),a("p",[t._v("The literal type recieves a string literal to check against.")]),a("p",[t._v("For example")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.describeStore({\n  identifier: 'notes',\n  model: {\n    title: types.string,\n    description: types.string\n    status: types.enum(['DRAFT', 'PUBLISHED', 'HIDDEN']),\n    fixed: types.literal('IMMUTABLE')\n  }\n});\n")])]),a("p",[t._v("If you try to set the property "),a("code",[t._v("fixed")]),t._v(" to another value that's not IMMUTABLE, in this example, it will complain and throw an error.")]),a("h3",{attrs:{id:"types-frozen-frozen-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-frozen-frozen-object","aria-hidden":"true"}},[t._v("#")]),t._v(" types.frozen(frozen: object)")]),a("p",[t._v("The frozen type receives an object with any properties that you want.")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("myCratebox.describeStore({\n  identifier: 'notes',\n  model: {\n    title: types.string,\n    description: types.string\n    status: types.enum(['DRAFT', 'PUBLISHED', 'HIDDEN']),\n    fixed: types.literal('IMMUTABLE'),\n    custom: types.frozen\n  }\n});\n\nmyCratebox.dispatch({\n  identifier: 'notes',\n  model: {\n    custom: {\n      hasReferences: true,\n      shareButtons: true,\n      allowComments: false\n    }\n  }\n})\n")])]),a("h2",{attrs:{id:"implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementations","aria-hidden":"true"}},[t._v("#")]),t._v(" Implementations")]),a("p",[t._v("Currently Cratebox has a React implementation.")]),a("h2",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[t._v("#")]),t._v(" React")]),a("p",[t._v("To make use of Cratebox with React, go to the official "),a("a",{attrs:{href:"https://github.com/alexvcasillas/cratebox-react",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cratebox React")]),t._v(" bindings.")]),a("h2",{attrs:{id:"roadmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#roadmap","aria-hidden":"true"}},[t._v("#")]),t._v(" Roadmap")]),a("p",[t._v("We have a roadmap for new implementations and this are our intentions:")]),a("ul",[a("li",[t._v("Specific State Time Traveling via "),a("code",[t._v("travelTo(index: number)")]),t._v(" exposed API method.")]),a("li",[t._v("Advanced types in the following order:\n"),a("ol",[a("li",[t._v("types.frozen")]),a("li",[t._v("types.literal")])])]),a("li",[t._v("Lifecycle hooks\n"),a("ul",[a("li",[t._v("Before Create via "),a("code",[t._v("beforeCreate")]),t._v(" model property.")]),a("li",[t._v("After Create via "),a("code",[t._v("afterCreate")]),t._v(" model property.")])])])]),a("h1",{attrs:{id:"thanks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thanks","aria-hidden":"true"}},[t._v("#")]),t._v(" Thanks!")]),a("p",[a("a",{attrs:{href:"https://twitter.com/mweststrate",target:"_blank",rel:"noopener noreferrer"}},[t._v("Michel Weststrate")]),t._v("'s incredible work on "),a("a",{attrs:{href:"https://github.com/mobxjs/mobx",target:"_blank",rel:"noopener noreferrer"}},[t._v("MobX")]),t._v(" and "),a("a",{attrs:{href:"https://github.com/mobxjs/mobx-state-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("MobX-State-Tree")]),t._v(" that has been a great inspiration since their early stages.")]),a("p",[a("a",{attrs:{href:"https://twitter.com/dan_abramov",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan Abramov")]),t._v("'s work on "),a("a",{attrs:{href:"https://github.com/reactjs/redux",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux")]),t._v(" that also has been a great inspiration while trying to mix it with "),a("a",{attrs:{href:"https://github.com/mobxjs/mobx-state-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("MobX-State-Tree")])]),a("p",[t._v("And also lots of thanks to you for reading this lines and took some time to read though the docs and maybe gave a try to this project.")])])}],!1,null,null,null);e.default=n.exports}}]);